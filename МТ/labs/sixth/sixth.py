# задаем алфавит
alphabet = ['begin', 'end', ';', ',', '*', '/', '+', '-', '(', ')', 'имя_процедуры', 'выражение', 'алгебраическое_сложение', 'переменная', 'число', 'пробел']

# считываем входную конструкцию
input_str = input("Введите конструкцию: ")

# разбиваем на токены
tokens = input_str.split()

# проверяем первый токен
if tokens[0] != 'begin':
    print("Ошибка: конструкция должна начинаться со слова 'begin'")
    exit()

# проверяем последний токен
if tokens[-1][-1] != ';':
    print("Ошибка: конструкция должна заканчиваться точкой с запятой")
    exit()
if tokens[-1][:-1] != 'end':
    print("Ошибка: конструкция должна заканчиваться словом 'end'")
    exit()

# удаляем первый и последний токены
tokens = tokens[1:-1]

# проверяем операторы процедуры
for i in range(len(tokens)):
    if tokens[i] == ',':
        continue # запятые между операторами пропускаем
    if tokens[i][-1] != ';':
        print("Ошибка: после каждого оператора процедуры должна быть точка с запятой")
        exit()
    operator = tokens[i][:-1] # удаляем точку с запятой
    if '(' not in operator or ')' not in operator:
        print("Ошибка: оператор процедуры должен иметь формат 'имя_процедуры(параметр_процедуры)' или 'имя_процедуры(параметр_процедуры, параметр_процедуры)'")
        exit()
    procedure_name, parameter_str = operator.split('(')
    parameter_str = parameter_str[:-1] # удаляем закрывающую скобку
    parameters = parameter_str.split(',')
    if not procedure_name.isalnum():
        print("Ошибка: имя процедуры может содержать только буквы и цифры")
        exit()
    for parameter in parameters:
        if parameter not in alphabet:
            try:
                float(parameter) # попытка преобразовать в число
            except ValueError:
                print("Ошибка: параметр процедуры должен быть выражением или алгебраическим сложением, содержащим переменные или числа")
                exit()

# если все проверки пройдены успешно, сообщаем о корректности конструкции
print("Конструкция корректна")

