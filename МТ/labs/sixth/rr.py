# Создаем конечный автомат
FA = {
    0: {' ': 0, 'b': 1},
    1: {'e': 2},
    2: {'g': 3},
    3: {'i': 4},
    4: {'n': 5},
    5: {' ': 5, '(': 6},
    6: {' ': 6, 'r': 7, 'a': 15, '-': 17, '+': 17, '(': 18, ' ': 19},
    7: {'1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8, ' ': 12},
    8: {' ': 9, '*': 10, '/': 10},
    9: {' ': 9, '*': 10, '/': 10, ',': 13, ')': 14},
    10: {' ': 11, 'a': 15, 'r': 17, '(': 18},
    11: {' ': 11, ',': 13, ')': 14},
    12: {',': 13, ')': 14},
    13: {' ': 13, 'r': 16, 'a': 15},
    14: {' ': 14, ';': 0},
    15: {'1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8},
    16: {'1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8, ' ': 12},
    17: {'1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8, ' ': 16},
    18: {'1': 8, '2': 8, '3': 8, '4': 8, '5': 8, '6': 8, ' ': 19},
    19: {'p': 7}
}

# Функция проверки входной строки на соответствие ДКА
def check_syntax(input_string):
    state = 0
    for symbol in input_string:
        if symbol not in FA[state]:
            return False
        state = FA[state][symbol]
    return state == 0

# Примеры правильной и неправильной конструкции
correct_string = "begin p2( r5*a1+a4); p4( a3-a4/r3, r1*r1) ; end;"
incorrect_string = "begin p2( r5*a1+a4); p4( a3-a4/r3, r1*r1) end;"

# Проверяем работу программы
print(check_syntax(correct_string)) # Вывод: True
print(check_syntax(incorrect_string)) # Вывод: False